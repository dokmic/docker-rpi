#!/usr/bin/expect

proc env {name {default ""}} {
  if {![info exists ::env($name)] || $::env($name) eq ""} {
    return $default
  }

  return $::env($name)
}

set root /media/sd
set boot $root/boot/firmware
set config_cmdline $boot/cmdline.txt
set config_ssh $boot/ssh.txt
set config_user $boot/userconf.txt

set default_arch aarch64
set default_cpu cortex-a72
set default_port 22/tcp
set default_ram 1G
set default_smp 4
set default_user pi
set default_password raspberry
set default_cmdline {
  console=ttyAMA0,115200
  panic=-1
  root=root
  rootflags=cache=none,msize=512000,posixacl,trans=virtio,version=9p2000.L
  rootfstype=9p
  rootwait=no
}

set cmdline_command [string cat \
  [if {$argc} {subst init=}] \
  [join [lmap arg $argv {string cat \" [string map {\" \"\"} $arg] \"}] " "]
]

set arch [env RPI_ARCH $default_arch]

set cpu [switch $arch {
  arm {subst ""}
  default {subst $default_cpu}
}]

set port [join [lmap port [list {*}[env RPI_PORT $default_port]] {
  lassign [split [string trim $port] "/"] port protocol
  subst ",hostfwd=$protocol\::$port-:$port"
}] ""]

if {![file exists $config_ssh] && [string is true [env RPI_SSH true]]} {
  exec touch $config_ssh
}

if {![file exists $config_user]} {
  exec echo "[env RPI_USER $default_user]:[exec openssl passwd -1 -stdin <<[env RPI_PASSWORD $default_password]]" >$config_user
}

while {true} {
  set panic_code 0
  set reboot false

  set cmdline [list {*}[exec cat $config_cmdline]]
  foreach parameter [list {*}$default_cmdline {*}[if {$argc} {lreplace $argv 0 0 init}]] {
    lassign [split $parameter =] key

    while {[set index [lsearch -regexp $cmdline "^${key}(=.*)?$"]] > -1} {
      set cmdline [lreplace $cmdline $index $index]
    }
  }
  set cmdline [join [list {*}$cmdline {*}$default_cmdline $cmdline_command] " "]

  spawn -noecho qemu-system-$arch \
    -serial mon:stdio \
    -nographic \
    -no-reboot \
    -machine virt \
    {*}[if {$cpu != ""} {subst "-cpu $cpu"}] \
    -m [env RPI_RAM $default_ram] \
    -smp [env RPI_CPU $default_smp] \
    -device virtio-net-device,netdev=net0 \
    -netdev user,id=net0$port \
    -kernel $boot/qemu.img \
    -drive file=$boot/locale.img,format=raw \
    -virtfs local,id=boot,mount_tag=boot,multidevs=remap,path=$boot,security_model=none,writeout=immediate \
    -virtfs local,id=root,mount_tag=root,multidevs=remap,path=$root,security_model=none,writeout=immediate \
    -append $cmdline

  match_max 1048576
  interact {
    -o -reset

    -nobuffer "reboot: Restarting system" {
      set reboot true
      expect eof
      return
    }

    -nobuffer -re {^\[\s*[\d\.]+\]\s+Kernel panic - not syncing: Requested init .* failed \(error (-?\d+)\)\.} {
      set panic_code $interact_out(1,string)
      expect eof
      return
    }

    -nobuffer -re {^\[\s*[\d\.]+\]\s+Kernel panic - not syncing: Attempted to kill init! exitcode=(0x[\da-f]+)[^\da-f]} {
      set panic_code [expr "$interact_out(1,string)>>8"]
      expect eof
      return
    }
  }

  if {$panic_code != 0} {
    exit $panic_code
  }

  lassign [wait] pid spawn_id os_error exit_code

  if {$exit_code != 0 || !$reboot} {
    exit $exit_code
  }
}
