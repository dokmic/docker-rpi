#!/usr/bin/expect

proc env {name {default ""}} {
  if {![info exists ::env($name)] || $::env($name) eq ""} {
    return $default
  }

  return $::env($name)
}

proc is_interactive {} {
  return [expr {[catch {chan configure stdin -mode}] == 0}]
}

proc interact_or_expect args {
  if {[is_interactive]} {
    return [uplevel interact $args]
  }

  return [uplevel expect -timeout -1 [lmap arg {*}$args {
    if {[lsearch -exact {-o -reset -nobuffer} $arg] > -1} {
      continue
    }

    set arg
  }]]
}

proc get_output {index type} {
  upvar [expr {[is_interactive] ? "interact_out" : "expect_out"}] output

  return $output($index,$type)
}

proc initialize {} {
  if {![file exists $::config_ssh] && [string is true [env RPI_SSH true]]} {
    exec touch $::config_ssh
  }

  if {![file exists $::config_user]} {
    exec echo "[env RPI_USER $::default_user]:[exec openssl passwd -1 -stdin <<[env RPI_PASSWORD $::default_password]]" >$::config_user
  }
}

proc get_cmdline {} {
  set cmdline_user [string cat \
    [if {$::argc} {subst init=}] \
    [join [lmap arg $::argv {string cat \" [string map {\" \"\"} $arg] \"}] " "]
  ]

  set cmdline_image [list {*}[exec cat $::config_cmdline]]

  foreach parameter [list {*}$::default_cmdline {*}[if {$::argc} {lreplace $::argv 0 0 init}]] {
    lassign [split $parameter =] key

    while {[set index [lsearch -regexp $cmdline_image "^${key}(=.*)?$"]] > -1} {
      set cmdline_image [lreplace $cmdline_image $index $index]
    }
  }

  return [join [list {*}$cmdline_image {*}$::default_cmdline $cmdline_user] " "]
}

proc spawn_qemu {code_var} {
  set arch [env RPI_ARCH $::default_arch]
  set cpu [switch $arch {
    arm {subst ""}
    default {subst $::default_cpu}
  }]
  set port [join [lmap port [list {*}[env RPI_PORT $::default_port]] {
    lassign [split [string trim $port] "/"] port protocol
    subst ",hostfwd=$protocol\::$port-:$port"
  }] ""]
  set ram [env RPI_RAM $::default_ram]
  set smp [env RPI_CPU $::default_smp]

  spawn -noecho qemu-system-$arch \
    -serial mon:stdio \
    -nographic \
    -no-reboot \
    -machine virt \
    {*}[if {$cpu != ""} {subst "-cpu $cpu"}] \
    -m $ram \
    -smp $smp \
    -device virtio-net-device,netdev=net0 \
    -netdev user,id=net0$port \
    -kernel $::boot/qemu.img \
    -drive file=$::boot/locale.img,format=raw \
    -virtfs local,id=boot,mount_tag=boot,multidevs=remap,path=$::boot,security_model=none,writeout=immediate \
    -virtfs local,id=root,mount_tag=root,multidevs=remap,path=$::root,security_model=none,writeout=immediate \
    -append [get_cmdline]

  set panic_code 0
  set reboot false

  match_max 1048576
  interact_or_expect {
    -o -reset

    -nobuffer "reboot: Restarting system" {
      set reboot true
      expect eof
      return
    }

    -nobuffer -re {\[\s*[\d\.]+\]\s+Kernel panic - not syncing: Requested init .* failed \(error (-?\d+)\)\.} {
      set panic_code [get_output 1 string]
      expect eof
      return
    }

    -nobuffer -re {\[\s*[\d\.]+\]\s+Kernel panic - not syncing: Attempted to kill init! exitcode=(0x[\da-f]+)[^\da-f]} {
      set panic_code [expr [get_output 1 string]>>8]
      expect eof
      return
    }
  }

  lassign [wait] pid spawn_id os_error exit_code

  upvar $code_var code
  if {$panic_code != 0} {
    set code $panic_code

    return false
  }

  if {$exit_code != 0 || !$reboot} {
    set code $exit_code

    return false
  }

  return true
}

set root /media/sd
set boot $root/boot/firmware
set config_cmdline $boot/cmdline.txt
set config_ssh $boot/ssh.txt
set config_user $boot/userconf.txt

set default_arch aarch64
set default_cpu cortex-a72
set default_port 22/tcp
set default_ram 1G
set default_smp 4
set default_user pi
set default_password raspberry
set default_cmdline {
  console=ttyAMA0,115200
  panic=-1
  root=root
  rootflags=cache=none,msize=512000,posixacl,trans=virtio,version=9p2000.L
  rootfstype=9p
  rootwait=no
}

initialize
while {[spawn_qemu code]} {}
exit $code
